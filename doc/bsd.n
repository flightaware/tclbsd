.TH BSD n 0.0 "Tcl-Extensions"
.HS BSD tcl
.BS
.SH NAME
BSD \- Tcl interface to various BSD UNIX functions
.SH SYNOPSIS
\fB::bsd::getloadavg\fR 
.br
\fB::bsd::rlimit \fIget|set soft|hard limitName ?val?\fR
.br
\fB::bsd::rusage\fR
.br
\fB::bsd::setproctitle \fIstring\fR
.br
\fB::bsd::statfs \fI path\fR
.br
\fB::bsd::getfsstat \fI?-wait|-nowait?\fR
.br
\fB::bsd::syslog open \fIident logopt facility\fR
.br
\fB::bsd::syslog close\fR
.br
\fB::bsd::syslog logmask \fIpriority\fR
.br
\fB::bsd::syslog log \fIpriority message\fR
.br
\fB::bsd::abort\fR
.br
\fB::bsd::cptime \fIarrayName\fR
.br
\fB::bsd::getkey \fI?timeout?\fR
.br
\fB::bsd::uptime\fR
.br
\fB::bsd::set_panic_proc\fR
.br
\fB::bsd::panic\fR
.br
.SH DESCRIPTION
The BSD extension provides Tcl programs with new Tcl commands to interface
to various system calls and library routines present in BSD UNIX.
.PP
\fB::bsd::getloadavg\fR returns the number of processes in the system
run queue as a list, representing averages over the last 1, 5, and 15
minutes.
.PP
\fB::bsd::rlimit\fR lets you get and set the current soft and hard settings 
for resource limits.  You can specify a 64-bit integer value for any of the
limits or \fBunlimited\fR to indicate that there is or should be no limit.
.PP
\fB::bsd::rlimit\fR limits can be set (or gotten) for the maximum amount of virtual memory the process is allowed to map, in bytes, using the \fIvirtual\fR parameter.  Likewise the largest size core file that can be created, in bytes, can be set (or read) using the \fIcore\fR parameter.
.PP
The maximum amount of CPU time that can be used by the process can be set with the \fIcpu\fR parameter, and the maximum size of the data segment of the process can be set with the \fIdata\fR argument.  The largest size file that can be created, in bytes, can be set with the \fIfsize\fR parameter, while the maximum size in bytes that a process can lock into memory using the mlock system call can be set with the \fImemlock\fR argument.
.PP
The maximum number of files that can be opened by the process can be set with the \fInofile\fR argument, while the maximum number of simultaneous processes for this user ID can be set with the \fInproc\fR argument.  The maximum size that a process's resident set size may grow (a limit on the amount of physical memory to be given to the process) can be set, in bytes, using the \fIrss\fR argument, while the maximum size of socket buffer usage can be controlled using the \fIsockbuf\fR argument.
.PP
The maximum stack size, in bytes, can be set with the \fIstack\fR argument, while the maximum amount of spawp space that can be reserved or used by all of this user's processes can be examined or controlled using the \Iswap\fR parameter, while the maximum number of pseudo-terminals created by the user can be set or examined using the \fIptys\fR argument.
.PP
Resource limits can be specified as \fIsoft\fR or \fIhard\fR.  If a soft limit is exceeded the process may receive a signal but will be allowed to continue until it reaches the hard limit.
.PP
\fB::bsd::rlimit set hard data [expr {256 * 1024 * 1024}]\fR, for example, sets a hard limit on the data segment size of the process to 256 megs of memory.
.PP
See the Berkeley manpage for \fIgetrlimit\fR and \fIsetrlimit\fR
for further details on the options available and what they do.
.PP
\fB::bsd::rusage\fR returns the cumulative resource usage for the current
process, as a list of key-value pairs, suitable for loading into an array
using \fIarray set\fR.  Resources listed include user CPU, system CPU,
max resident set size, shared text Kbyte seconds, unshared data Kbyte
seconds, statck Kbyte seconds, page reclaims, page faults, number of times
swapped, number of file system inputs and outputs, number of interprocess
communications (IPC) messages sent and received, number of signals
delivered, number of voluntary context switches, and number of involuntary
context switches.  For more information see the BSD \fIgetursage\fR manpage.
.PP
\fB::bsd::setproctitle\fR sets the process title that appears on the \fIps\fR
command.  The title is set from the executable's name, followed by the
specified string.  If the string argument begins with a dash characters,
the executable's name is skipped.  If no string is specified, the process
title is restored.  For more information see the BSD \fIsetproctitle\fR
manpage.
.PP
\fB::bsd::statfs\fR returns information about a mounted filesystem.
The \fIpath\fR argument is the path name of any file within the mounted
filesystem.  Results are returned as a list of key-value pairs suitable
for loading into an array using \fIarray set\fR.  Values returned include
the fundamental filesystem block size (\fIfundamentalFileSystemBlockSize\fR), 
the optimal transfer block size (\fIoptimalTransferBlockSize\fR),
the total number of data blocks (\fItotalDataBlocks\fR), the total number of 
free blocks (\fIfreeBlocks\fR), and
the total number of available free blocks (\fIavailableFreeBlocks\fR). 
Also included are the total number of filesystem nodes (\fItotalFileNodes\fR)
and the free file nodes (\fIfreeFileNodes\fR), the file system 
type (\fIfileSystemType\fR), mount point (\fImountPoint), and mounted 
filesystem name (\fImountedFileSystem\fR).  Finally a list of flags is 
provided, which can include \fBreadOnly\fR, \fBsynchronous\fR,
\fBnoExec\fR, \fBnoSUID\fR, \fBnoDev\fR, \fBunion\fR, \fBasynchronous\fR,
\fBSUIDdir\fR, \fBsoftUpdates\fR, \fBnoFollowSymlinks\fR, \fBnoAtime\fR,
\fBnoClusterRead\fR, \fBnoClusterWrite\fR, \fBexportReadOnly\fR,
\fBexported\fR, \fBworldExported\fR, \fBanonUidMapping\fR,
\fBkerberosUidMapping\fR, \fBwebNFS\fR, \fBfilesystemStoredLocally\fR,
\fBquotasEnabled\fR, \fBrootFilesystem\fR, \fBuserMounted\fR, \fBmultiLabel\fR,
\fBgjournal\fR and \fBaclsEnabled\fR.
.PP
\fB::bsd::getfsstat\fR functions like \fBstatfs\fR, except that it returns
a list of lists with information about all mounted filesystems.  If
\fI-nowait\fR or no option is specified, \fBgetfsstat\fR will directly return
the filesystem information retained in the kernel to avoid delays caused
by waiting for updated information from a filesystem that is perhaps
temporarily unable to respond, at the cost of the data perhaps not reflecting
the absolutely current status of the filesystem.  As some of the information 
returned may be out of date, if \fI-wait\fR is specified, \fBgetfsstat\fR will
request updated information for each mounted filesystem prior to returning.
.PP
\fB::bsd::syslog\fR provides a direct interface to the syslog library
to provide a way to write messages into the system log.  
\fB::bsd::syslog open\fR takes an identifier, a list of zero or more
\fIlog options\fR, and a facility name.
The facility name can be one of \fBauth\fR, \fBauthpriv\fR, \fBconsole\fR,
\fBcron\fR, \fBdaemon\fR, \fBftp\fR, \fBkern\fR, \fBlpr\fR, \fBmail\fR,
\fBnews\fR, \fBntp\fR, \fBsecurity\fR, \fBsyslog\fR, \fBuser\fR, \fBuucp\fR,
\fBlocal0\fR, \fBlocal1\fR, \fBlocal2\fR, \fBlocal3\fR, \fBlocal4\fR,
\fBlocal5\fR, \fBlocal6\fR, or \fBlocal7\fR.
.PP
Log options can include \fBconsole\fR, which causes the message to be
logged on the console if there are errors in sending it, \fBno_delay\fR,
which theoretically says not to delay opening the syslog connection until
the first syslog call is made, but check your documentation on syslog(3)
to see if that's really true, \fBpid\fR, which says to log the process
ID along with whatever else, and \fBperror\fR, which says to log the
message to stderr as well as to the system log.
.PP
\fB::bsd::syslog log\fR takes a priority and a message.
Priority can be one of 
\fBemerg\fR, \fBalert\fR, \fBcrit\fR, \fBerr\fR, \fBwarning\fR, 
\fBnotice\fR, \fBinfo\fR, or \fBdebug, in descending order of priority.
Check your documentation on your syslog library, high priority messages
do stuff besides logging, like blasting to all logged in users, while
\fB::bsd::syslog close\fR closes the connection to the system log.
Finally, .fB::bsd::syslog logmask\fR sets the log priority mask and masks all priorities
up to and including the specified one.  For instance, if you invoked
the logmask option with the \fBinfo\fR priority, both \fIinfo\fR and
\fIdebug\fR log messages would be suppressed.
.PP
\fB::bsd::abort\fR causes abnormal program termination to occur by issuing
an abort signal and will work unless the SIGABRT signal is being caught
and the signal handler does not return.
.PP
\fB::bsd::cptime\fR takes an array name as an argument and will fill it with 
key-value pairs representing system, user, nice, interrupt, idle, and total 
clock  counts.  
.PP
Upon a second invocation with the same array as an argument, it will 
calculate the cpu time of the various elements as a percentage over the 
range of elapsed time since the prior call, returning the percentages as a 
list of key-value pairs and updating the array with the latest sampled values.
.PP
.CS
\fB::bsd::cptime time; after 1000; puts [::bsd::cptime time]\fR
.CE
.PP
\fIuser 12 nice 0 sys 0 intr 0 idle 87\fR
.PP
This is a more instantaneous way to judge CPU utilization than load average,
which is a weighted average that changes slowly over time, so the load average 
can be 100 but the CPUs may be 95% because really the load average isn't 100, 
it's just slowly falling back from when it was at or even far above that.
.PP
\fB::bsd::getkey\fR reads a single key from the user's terminal and returns
it as an integer value.  For example, invoking the function and then pressing
\fBa\fR on the terminal returns \fB97\fR.
.PP
The
\fItimeout\fR value, if specified, is the number of seconds to wait for
a key to be pressed.  It has accuracy to about a tenth of a second and must be
a value between 0.0 and 25.5.  If no key is pressed within the timeout interval,
an empty string is returned.  If the timeout is not specified, getkey will
wait for an unlimited amount of time for a key to be pressed.
.PP
\fB::bsd::uptime\fR returns the number of CPU seconds that the system has been up, as a double-precision floating point number.
.PP
\fB::bsd::set_panic_proc\fR sets the Tcl panic proc, a C function that is invoked in the event that the Tcl interpreter encounters a crash condition and invokes Tcl_Panic, to one provided by tclbsd.  The tclbsd version logs the panic message to the system log via the syslog() system call as well are writing it to stderr.  (The default version only writes it to stderr).
.PP
\fB::bsd::panic message\fR invokes Tcl's \fBTcl_Panic\fR function with the specified message as its argument.
